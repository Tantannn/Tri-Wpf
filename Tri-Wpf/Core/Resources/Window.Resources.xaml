<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:Tri_Wpf">

    <!-- Converters -->
    <!-- <cv:NullableDoubleToStringConverter x:Key="NullableDoubleToStringConverter"/> -->
    <!-- <cv:NullableDoubleToStringConverter1 x:Key="NullableDoubleToStringConverter1"/> -->
    <!-- <cv:NullableIntToStringConverter x:Key="NullableIntToStringConverter"/> -->
    <!-- <cv:StringToDateTimeNullableConverter x:Key="StringToDateTimeConverter"/> -->
    <!-- <cv:SpacingDisplayConverter x:Key="SpacingDisplayConverter"/> -->
    <!-- <cv:CrossGirderHToParallelDisplay x:Key="CrossGirderHToParallelDisplay"/> -->
    <!-- <cv:CrossGirderHToProfileDisplay x:Key="CrossGirderHToProfileDisplay"/> -->
    <!-- <cv:CrossGirderHToQuantityDisplay x:Key="CrossGirderHToQuantityDisplay"/> -->
    <!-- <cv:CrossGirderHToDeltaC1Display x:Key="CrossGirderHToDeltaC1Display"/> -->
    <!-- <cv:CrossGirderHToDeltaC2Display x:Key="CrossGirderHToDeltaC2Display"/> -->
    <!-- <cv:DeckHToProfileDisplay x:Key="DeckHToProfileDisplay"/> -->
    <!-- <cv:UnitDetailsToEnableConverter x:Key="UnitDetailsToEnableConverter"/> -->
    <!-- <cv:BoolToEnableConverter x:Key="BoolToEnableConverter"/> -->
    <!-- <cv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/> -->
    <!-- <cv:BoolToVisibilityConverterHidden x:Key="BoolToVisibilityConverterHidden"/> -->
    <!-- <cv:BoolToVisibilityReverseConveter x:Key="BoolToVisibilityReverseConverter"/> -->
    <!-- <cv:NullValueToVisibilityConverter x:Key="NullValueToVisibilityConverter"/> -->
    <!-- <cv:NullValueToVisibilityReverseConverter x:Key="NullValueToVisibilityReverseConverter"/> -->
    <!-- <cv:BooleanNegationConverter x:Key="BooleanNegationConverter"/> -->
    <!-- <cv:RailingTypeToVisibilityConverter x:Key="RailingTypeToVisibilityConverter"/> -->
    <!-- <cv:RailingTypeToEnableConverter x:Key="RailingTypeToEnableConverter"/> -->
    <!-- <cv:RemoveFirstEnumValueConverter x:Key="RemoveFirstEnumValueConverter"/> -->
    <!-- <cv:RemoveFirstAndLastEnumValueConverter x:Key="RemoveFirstAndLastEnumValueConverter"/> -->
    <!-- <cv:BraceSpanToEnableConverter x:Key="BraceSpanToEnableConverter"/> -->
    <!-- <cv:UnitNameConverter x:Key="UnitNameConverter"/> -->
    <!-- <cv:RailingLengthConverter x:Key="RailingLengthConverter"/> -->
    <!-- <cv:PileProfileToVisibilityConverter x:Key="PileProfileToVisibilityConverter"/> -->
    <!-- <cv:PileProfileToEnableConverter x:Key="PileProfileToEnableConverter"/> -->
    <!-- <cv:UnitTypeToEnableConverter x:Key="UnitTypeToEnableConverter"/> -->
    <!-- <cv:MainGirderSpacingWidthToVisibilityConverter x:Key="MainGirderSpacingWidthToVisibilityConverter"/> -->
    <!-- <cv:IsEnabledTextBoxConverter x:Key="IsEnabledTextBoxConverter" /> -->
    <!-- <cv:GroupItemConverter x:Key="GroupItemConverter" /> -->
    <!-- <cv:GroupItemCommandParameter x:Key="GroupItemCommandParameter" /> -->
    <!-- <cv:MultiBoolToVisibilityConverter x:Key="MultiBoolToVisibilityConverter"/> -->
    <!-- -->
    
    <!-- Static properties value -->
    <SolidColorBrush x:Key="Container.Static.Border.Default" Color="#ACACAC" />
    <SolidColorBrush x:Key="Control.Static.Highlight.Default" Color="#cce8ff" />
    <SolidColorBrush x:Key="Control.Static.Foreground.Default" Color="Black" />
    <SolidColorBrush x:Key="Control.Disabled.Foreground.Default" Color="#696969" />
    <SolidColorBrush x:Key="Control.Disabled.Background.Default" Color="#f8f8f8" />
    <SolidColorBrush x:Key="Deck.Typical" Color="#f0ddc2" />
    <SolidColorBrush x:Key="Deck.Special" Color="#e4f3c2" />
    <SolidColorBrush x:Key="Deck.Remain" Color="#c9f4c2" />

    <Style TargetType="Border">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{StaticResource Container.Static.Border.Default}" />
    </Style>

    <Thickness x:Key="ComboBox.Static.Padding">4 0 4 0</Thickness>
    <sys:Double x:Key="ComboBox.Height.Normal">23</sys:Double>

    <Thickness x:Key="TextBox.Static.Padding">4 0 4 0</Thickness>
    <sys:Double x:Key="TextBox.Height.Normal">22</sys:Double>
    <sys:Double x:Key="TextBox.Width.Normal">60</sys:Double>
    <sys:Double x:Key="TextBox.Width.Large">95</sys:Double>

    <sys:Double x:Key="Button.Height.Normal">22</sys:Double>
    <sys:Double x:Key="Button.Width.Normal">75</sys:Double>
    <sys:Double x:Key="Button.Width.Small">40</sys:Double>
    <sys:Double x:Key="Button.Width.Medium">90</sys:Double>
    <sys:Double x:Key="Button.Width.Large">125</sys:Double>

    <sys:Double x:Key="DataGridColumnHeader.Static.Height.OneLine">25</sys:Double>
    <sys:Double x:Key="DataGridColumnHeader.Static.Height.TwoLine">50</sys:Double>
    <sys:Double x:Key="DataGridColumnHeader.Static.Height.TwoLine.MergedCell">50</sys:Double>
    <sys:Double x:Key="DataGridColumnHeader.Static.Height.ThreeLine">58</sys:Double>
    <!-- -->

    <!-- Control base styles -->
    
    <ControlTemplate x:Key="EmptyValidationTemplate">
        <AdornedElementPlaceholder />
    </ControlTemplate>
    
    
    <SolidColorBrush x:Key="TextBox.Static.BorderBrush" Color="#7a7a7a" />
    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Height" Value="{StaticResource TextBox.Height.Normal}" />
        <Setter Property="Width" Value="{StaticResource TextBox.Width.Normal}" />
        <Setter Property="Padding" Value="{StaticResource TextBox.Static.Padding}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.BorderBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Control.Static.Foreground.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="Button.Static.BorderBrush" Color="#adadad" />
    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Style.Setters>
            <Setter Property="Height" Value="{StaticResource Button.Height.Normal}" />
            <Setter Property="Width" Value="{StaticResource Button.Width.Normal}" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.BorderBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Control.Static.Foreground.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Control.Static.Foreground.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Control.Static.Foreground.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Control.Static.Foreground.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Control.Static.Foreground.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="GroupBox" x:Key="AlternateGroupBoxStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="18" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0" Margin="0 -9 0 0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="5px" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <!-- Header -->
                            <Border Grid.Row="1" Grid.Column="0" BorderThickness="1,1,0,0" BorderBrush="#ACACAC" SnapsToDevicePixels="True" CornerRadius="0,0,0,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                            <Label Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                                <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                            </Label>
                            <Border Grid.Row="1" Grid.Column="2" BorderThickness="0,1,1,0" SnapsToDevicePixels="True" BorderBrush="#ACACAC" CornerRadius="0,0,0,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                        </Grid>

                        <!-- Content -->
                        <Border Grid.Row="1" BorderBrush="#ACACAC" SnapsToDevicePixels="True" BorderThickness="1,0,1,1" CornerRadius="0,0,0,0" Margin="0,0,0,0">
                            <ContentPresenter Margin="1" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Height" Value="{StaticResource ComboBox.Height.Normal}" />
        <Setter Property="Padding" Value="{StaticResource ComboBox.Static.Padding}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource Control.Static.Foreground.Default}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="DataGrid.Static.GridLinesBrush.Common" Color="#A0A0A0" />
    <SolidColorBrush x:Key="DataGrid.Static.BorderBrush" Color="#A0A0A0" />
    <SolidColorBrush x:Key="DataGrid.Static.Background" Color="White" />
    <Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="RowValidationErrorTemplate" Value="{x:Null}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource EmptyValidationTemplate}" />
        <Setter Property="BorderBrush" Value="{StaticResource DataGrid.Static.BorderBrush}" />
        <Setter Property="Background" Value="{StaticResource DataGrid.Static.Background}" />
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource DataGrid.Static.GridLinesBrush.Common}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource DataGrid.Static.GridLinesBrush.Common}" />
        <Setter Property="RowHeight" Value="24" />

        <Setter Property="SelectionMode" Value="Extended" />

        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="CanUserSortColumns" Value="False" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeColumns" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="False" />

        <Setter Property="EnableRowVirtualization" Value="False" />
        <Setter Property="EnableColumnVirtualization" Value="False" />
    </Style>

    <SolidColorBrush x:Key="DataGridColumnHeader.Static.Background" Color="#DCDCDC" />
    <SolidColorBrush x:Key="DataGridColumnHeader.Static.BorderBrush" Color="#A0A0A0" />
    
    <Style TargetType="DataGridColumnHeader" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
        <Setter Property="Background" Value="{StaticResource DataGridColumnHeader.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource DataGridColumnHeader.Static.BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="DataGridCell" BasedOn="{StaticResource ResourceKey={x:Type DataGridCell}}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Background" Value="#CCE8FF" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="BorderBrush" Value="#a0a0a0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ToolTip" BasedOn="{StaticResource {x:Type ToolTip}}">
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- -->

    <!-- TextBox input with validation -->

    <SolidColorBrush x:Key="TextBox.Dirty.Background" Color="#ebfff0" />
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#ffffff" />
    <SolidColorBrush x:Key="TextBox.Error.Background" Color="#ffdcdc" />

    <Style x:Key="InputTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource EmptyValidationTemplate}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding HasChanged}" Value="True">
                <Setter Property="Background" Value="{StaticResource ResourceKey=TextBox.Dirty.Background}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding HasError}" Value="True">
                <Setter Property="Background" Value="{StaticResource ResourceKey=TextBox.Error.Background}" />
            </DataTrigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{StaticResource ResourceKey=TextBox.Error.Background}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NumericInputTextBox" TargetType="TextBox" BasedOn="{StaticResource InputTextBox}">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>
    <Style x:Key="NumericInputTextBoxInDataGrid" TargetType="TextBox" BasedOn="{StaticResource InputTextBox}">
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="Height" Value="Auto"></Setter>
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0 0 4 0" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(TextBox.IsEnabled)}" Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#CCE8FF" />
                    <Setter Property="Cursor" Value="Arrow" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(TextBox.IsEnabled)}" Value="False" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Cursor" Value="Arrow" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#838383" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="NumericInputTextBoxInCellGrid" TargetType="TextBox" BasedOn="{StaticResource InputTextBox}">
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="Height" Value="Auto"></Setter>
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0 0 4 0" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(TextBox.IsEnabled)}" Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#CCE8FF" />
                    <Setter Property="Cursor" Value="Arrow" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(TextBox.IsEnabled)}" Value="False" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Cursor" Value="Arrow" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#838383" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- -->

    <!-- DataGrid component-in-cell styles -->
    <Style x:Key="CellTextBlock" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Padding" Value="{StaticResource TextBox.Static.Padding}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="500" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background}"/>
        <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background}"/>
    </Style>

    <Style x:Key="NumericCellTextBlock" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Padding" Value="{StaticResource TextBox.Static.Padding}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="500" />
    </Style>

    <Style x:Key="CellTextBox" TargetType="TextBox" BasedOn="{StaticResource InputTextBox}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="NumericCellTextBox" TargetType="TextBox" BasedOn="{StaticResource NumericInputTextBox}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />

    </Style>

    <Style x:Key="CellButton" TargetType="Button" BasedOn="{StaticResource ResourceKey={x:Type Button}}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <!-- Cell combobox and part -->
    <ControlTemplate x:Key="CellComboBoxToggleButtonPart" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    Grid.ColumnSpan="2"
                    CornerRadius="0"
                    BorderBrush="Transparent"
                    Background="{TemplateBinding Background}"
                    BorderThickness="0"
                    SnapsToDevicePixels="true">
            </Border>
            <Border Grid.Column="1" HorizontalAlignment="Right">
                <Path x:Name="Arrow" Stretch="Fill" Width="5" Height="4"
                      Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                      Fill="#FF606060" HorizontalAlignment="Center" Margin="0 0 6 0" VerticalAlignment="Center" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource Control.Disabled.Foreground.Default}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="CellComboBoxTextBoxPart" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="CellComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Background="{TemplateBinding Background}">
                        <ToggleButton x:Name="ToggleButton"
                                      Template="{StaticResource CellComboBoxToggleButtonPart}"
                                      Focusable="True"
                                      Background="Transparent"
                                      ClickMode="Release"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter x:Name="ContentSite"
                                          IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="6 0 25 0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"
                                          IsEnabled="True" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}"
                                 Template="{StaticResource CellComboBoxTextBoxPart}"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="Center"
                                 HorizontalContentAlignment="Left"
                                 Margin="3,3,23,3"
                                 Focusable="True"
                                 Background="Transparent"
                                 Foreground="Black"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup x:Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               StaysOpen="False"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        BorderThickness="1"
                                        Background="White "
                                        BorderBrush="#646464">
                                </Border>
                                <ScrollViewer x:Name="ScrollViewer"
                                              Margin="1"
                                              SnapsToDevicePixels="True"
                                              OverridesDefaultStyle="True"
                                              FontStretch="Normal">
                                    <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained">
                                    </StackPanel>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsEditable" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" TargetName="PART_EditableTextBox" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                            <Setter TargetName="DropDownBorder" Property="BorderBrush" Value="DimGray" />
                            <Setter TargetName="DropDownBorder" Property="BorderThickness" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="Background" Value="Transparent"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Cell combobox and part -->
    <Style x:Key="CellComboBoxExtendItem" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Background="{TemplateBinding Background}">
                        <ToggleButton x:Name="ToggleButton"
                                      Template="{StaticResource CellComboBoxToggleButtonPart}"
                                      Focusable="True"
                                      Background="Transparent"
                                      ClickMode="Release"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter x:Name="ContentSite"
                                          IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="6 0 25 0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"
                                          IsEnabled="True" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}"
                                 Template="{StaticResource CellComboBoxTextBoxPart}"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="Center"
                                 HorizontalContentAlignment="Left"
                                 Margin="3,3,23,3"
                                 Focusable="True"
                                 Background="Transparent"
                                 Foreground="Black"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup x:Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               StaysOpen="False"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        BorderThickness="0"
                                        Background="White "
                                        BorderBrush="#646464">
                                </Border>
                                <ScrollViewer x:Name="ScrollViewer"
                                              Margin="0"
                                              SnapsToDevicePixels="True"
                                              OverridesDefaultStyle="True"
                                              FontStretch="Normal">
                                    <Grid>
                                        <ItemsPresenter HorizontalAlignment="Stretch" />
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsEditable" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Foreground" Value="{StaticResource Control.Disabled.Foreground.Default}" TargetName="PART_EditableTextBox" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                            <Setter TargetName="DropDownBorder" Property="BorderBrush" Value="DimGray" />
                            <Setter TargetName="DropDownBorder" Property="BorderThickness" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="Background" Value="Transparent"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Expander-->
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true" StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <DockPanel Background="Transparent" Tag="Header">
                        <Image Tag="Header" x:Name="arrow" Source="pack://application:,,,/PcBridge.App;component/Resources/Images/ArrowDown.png" Stretch="None"
                               HorizontalAlignment="Left" VerticalAlignment="Center" Margin="12 0 0 0" Width="20" />
                        <ContentPresenter HorizontalAlignment="Stretch" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">

                            <Setter Property="Source" TargetName="arrow" Value="pack://application:,,,/PcBridge.App;component/Resources/Images/ArrowUp.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RevitExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" DockPanel.Dock="Top" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="0" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom ToggleButton Template for Expander Header -->
    <ControlTemplate x:Key="CustomExpanderToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="0,0,0,0">
            <DockPanel>
                <!-- Expand/Collapse Icon (Arrow) -->
                <Path x:Name="Arrow"
                      Data="M 0 0 L 20 0 L 20 -20 Z"
                      Stretch="Uniform"
                      Stroke="Black"
                      StrokeThickness="3"
                      Margin="3" Height="6">
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>

                <!-- Header Content -->
                <ContentPresenter Margin="2,0,0,0" ContentSource="Content" VerticalAlignment="Center" />
            </DockPanel>
        </Border>

        <!-- Rotate the Arrow when the ToggleButton is checked -->
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M 0 0 L 20 20 L 20 0 Z" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Custom Expander Style -->
    <Style x:Key="CustomExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{StaticResource DataGrid.Static.BorderBrush}" BorderThickness="0" CornerRadius="0" Background="{TemplateBinding Background}">
                        <DockPanel>
                            <!-- Header Button (ToggleButton) -->
                            <ToggleButton x:Name="ExpanderToggleButton"
                                          DockPanel.Dock="Top"
                                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          Template="{StaticResource CustomExpanderToggleButtonTemplate}"
                                          Content="{TemplateBinding Header}"
                                          Background="#dcdcdc"
                                          FontWeight="Bold"
                                          Foreground="Black"
                                          HorizontalContentAlignment="Left"
                                          Padding="10,5" />

                            <!-- Content Presenter -->
                            <ContentPresenter x:Name="Content"
                                              Visibility="Collapsed"
                                              Margin="0"
                                              ContentSource="Content"
                                              HorizontalAlignment="Left" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Show Content when IsExpanded is True -->
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="Content" Property="Visibility" Value="Visible" />
                            <!-- <Setter TargetName="ExpanderToggleButton" Property="Background" Value="#FFC0C0C0" /> -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>